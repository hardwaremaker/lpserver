
<!-- Build file zum veroeffentlichen des deploys.. -->
<!-- CLASSPATH fuer heliumv -->
<!-- ====|==========|================================================================= -->
<!-- KF    22.01.08   created -->
<project name="update" basedir="." default="publish">
  
 <!-- properties laden -->
  <property environment="env"/>
	<property file="../../conf/update.properties"/>
	<property file="build.properties.local"/>
	<property file="build.properties"/>
	
	<property name="file.build.commons" value="build-commons.xml"/>
	<import file="${file.build.commons}"/>
	
	<!-- ant-contrib: if, for, ... -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	    <pathelement location="${env.ANT_HOME}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>

	<taskdef name="unset" classname="ise.antelope.tasks.Unset"/>
	
	<!-- in windows use the delivered bzip2 - executable. in linux it should be installed by default. -->
	<condition property="dir.bzip2" value="../../../bin/windows">
		<and>
			<not><isset property="dir.bzip2"/></not>
			<os family="windows"/>
		</and>
	</condition>
	
	<!-- wrapper-macro to execute diff or patch-command. -->
	<macrodef name="executediffpatch" backtrace="true">
		<attribute name="oldfile" default=""/>
		<attribute name="newfile" default=""/>
		<attribute name="patchfile" default=""/>
		<attribute name="command" default=""/>
		<sequential>
			<condition property="path" value="${env.PATH};${dir.bzip2}" else="${env.PATH}">
				<isset property="dir.bzip2"/>
			</condition>
			<exec executable="@{command}" failonerror="true">
				<env key="PATH" path="${path}"/>
				<arg value="@{oldfile}"/>
				<arg value="@{newfile}"/>
				<arg value="@{patchfile}"/>
			</exec>
		</sequential>
	</macrodef>
	
	<macrodef name="bsdiff" backtrace="true">
		<attribute name="oldfile" default=""/>
		<attribute name="newfile" default=""/>
		<attribute name="patchfile" default=""/>
		<sequential>
			<echo message="creating patch for file: @{oldfile}"/>
			<executediffpatch command="${cmd.bsdiff}" oldfile="@{oldfile}" newfile="@{newfile}" patchfile="@{patchfile}"/>
		</sequential>
	</macrodef>
	
	<macrodef name="bspatch" backtrace="true">
		<attribute name="oldfile" default=""/>
		<attribute name="newfile" default=""/>
		<attribute name="patchfile" default=""/>
		<sequential>
			<echo message="patching file: @{oldfile}"/>
			<executediffpatch command="${cmd.bspatch}" oldfile="@{oldfile}" newfile="@{newfile}" patchfile="@{patchfile}"/>
		</sequential>
	</macrodef>
	
<target name="check.environment">
	<fail message="Cannot find bspatch-command! Aborting.">
		<available file="${cmd.bspatch}"/>
	</fail>
	<fail message="Cannot find bsdiff-command! Aborting.">
		<available file="${cmd.bsdiff}"/>
	</fail>
</target>

<!--***************************************************-->
<!-- removes the directory needed for 
	stripping/unstripping the client-->
<!--***************************************************-->	
<target name="clean.client">
	<fail unless="dir.client" message="property dir.client not set. cannot proceed!" />
	<delete dir="${dir.client}/${name.stripped.dir}"/>
</target>


<!--***************************************************-->
<!-- repacks the client in the original manner in order to
	retrieve installer-jar and -zip files -->
<!--***************************************************-->	
<target name="unstrip.client" >
	<fail unless="dir.client" message="property dir.client not set. cannot proceed!" />
	<var name="dir.stripped" value="${dir.client}/${name.stripped.dir}" />
	
	<!-- packs wieder ins jar packen -->
	<zip destfile="${dir.stripped}/${name.installer.jar}">
		<zipfileset src="${dir.stripped}/${prefix.stripped}${name.installer.jar}"/>
		<fileset dir="${dir.stripped}">
			<include name="packs/**"/>
		</fileset>
	</zip>
	
	<!-- jar und exe wieder ins zip packen -->
	<zip destfile="${dir.client}/${name.installer.zip}">
		<zipfileset src="${dir.stripped}/${prefix.stripped}${name.installer.zip}"/>
		<fileset dir="${dir.stripped}">
			<include name="${name.installer.jar}"/>
			<include name="${name.installer.exe}"/>
		</fileset>
	</zip>
	
	<!--jar wird nicht geloescht, sondern ins client-verzeichnis kopiert! -->
	<copy todir="${dir.client}">
	  <fileset dir="${dir.stripped}">
			<include name="${name.installer.jar}"/>
		</fileset>
	</copy>	
</target>
	

<!--***************************************************-->
<!-- gets some files out of the installer zip and jar to make
	patching more effective. -->
<!--***************************************************-->	
<target name="strip.client" >
	<fail unless="dir.client" message="property dir.client not set. cannot proceed!" />
	
	<var name="dir.stripped" value="${dir.client}/${name.stripped.dir}" />
	
	<if>
		<not><available file="${dir.stripped}"/></not>
		<then>
			<mkdir dir="${dir.stripped}" />
			<copy file="${dir.client}/${name.installer.zip}" todir="${dir.stripped}"/>

			<copy todir="${dir.stripped}" preservelastmodified="true">
				<zipfileset src="${dir.stripped}/${name.installer.zip}">
					<patternset>
						<include name="${name.installer.jar}"/>
						<include name="${name.installer.exe}"/>
					</patternset>
				</zipfileset>
			</copy>

			<zip destfile="${dir.stripped}/${prefix.stripped}${name.installer.zip}">
				<zipfileset src="${dir.stripped}/${name.installer.zip}">
					<exclude name="${name.installer.jar}"/>
					<exclude name="${name.installer.exe}"/>
				</zipfileset>
			</zip>
			<delete file="${dir.stripped}/${name.installer.zip}"/>

			<copy todir="${dir.stripped}" preservelastmodified="true">
				<zipfileset src="${dir.stripped}/${name.installer.jar}">
					<patternset>
						<include name="packs/**"/>
					</patternset>
				</zipfileset>
			</copy>
			<zip destfile="${dir.stripped}/${prefix.stripped}${name.installer.jar}">
				<zipfileset src="${dir.stripped}/${name.installer.jar}">
					<exclude name="packs/**"/>
				</zipfileset>
			</zip>
			<delete file="${dir.stripped}/${name.installer.jar}"/>
		</then>
	</if>
</target>



<!--***************************************************-->
<!-- applies a patch to the previous version in order to get
	the full actual one. -->
<!--***************************************************-->	
<target name="apply.patch" depends="get.buildnumber, get.prev.buildnumber">
	<fail unless="buildnumber" message="buildnumber not set. cannot proceed!" />
	<fail unless="prevbuildnumber" message="prevbuildnumber not set. cannot proceed!" />
	
	<loadfile property="patchedbuild"	srcfile="${name.patchedbuild.file}"/>
	<condition property="is.patch.applicable" value="true">
		<equals arg1="${patchedbuild}" arg2="${prevbuildnumber}"/>
	</condition>
	<fail unless="is.patch.applicable" message="This patch is applicable only on build ${patchedbuild} but the last available build is ${prevbuildnumber}. Cannot proceed!" />
	
	<property name="dir.full" value="../${name.full.dir}"/>
	<available property="is.available.full" file="${dir.full}"/>
	<fail if="is.available.full" message="full setup already exists! Cannot proceed." />
	
	<mkdir dir="${dir.full}"/>
	
	<dirname property="dir.this" file="${ant.file.update}" />

	<!-- replaces "\" with "\\" in order to use the dir as regexp later.-->
	<propertyregex property="regex.dir.this"	input="${dir.this}"
						regexp="\\"	replace="\\\\\\\\" global="true" defaultvalue="${dir.this}" />
	
	<dirname property="dir.prev.base" file="${dir.this.basedir}/${prevbuildnumber}/${name.full.dir}"/>
	<property name="dir.prev" value="${dir.prev.base}/${name.full.dir}"/>
	<propertyregex property="regex.dir.prev"	input="${dir.prev}"
						regexp="\\"	replace="\\\\\\\\\\\\\\\\" global="true" defaultvalue="${dir.prev}"/>
	
	<!-- clone the directory structure -->
	<copy todir="${dir.full}">
		<dirset dir="." />
		<fileset dir="." >
			<include name="*"/>
		</fileset>
	</copy>
	
	<!-- patchfiles anwenden  -->
	<for param="file">
		<path>
			<fileset dir=".">
				<include name="**/*.${postfix.patch}"/>
			</fileset>
		</path>
		<sequential>
			<var name="patchfile" value="@{file}"/>
			
			<propertyregex property="oldfile"	input="${patchfile}" override="true"
						regexp="${regex.dir.this}"	replace="${regex.dir.prev}" />
			<propertyregex property="oldfile" input="${oldfile}" override="true"
						regexp="(.*)\.${postfix.patch}"	select="\1" />
			
			<propertyregex property="newfile"	input="${patchfile}" override="true"
						regexp="(.*)${name.patch.dir}(.*)\.${postfix.patch}"	select="\1${name.full.dir}\2" />
			
			
			<!-- generate checksums of old and new files: -->
			<dirname property="dir.checksum.base" file="${patchfile}"/>
			<checksum verifyproperty="is.correct.oldfile" file="${oldfile}" todir="${dir.checksum.base}" fileext=".old.md5"/>
			<fail message="checksum verification for file ${oldfile} failed! Cannot apply patch!">
				<condition><not><istrue value="${is.correct.oldfile}"/></not></condition>
			</fail>
			<unset name="is.correct.oldfile"/>
			
			<bspatch oldfile="${oldfile}" newfile="${newfile}" patchfile="${patchfile}" /> 
			
			<checksum verifyproperty="is.correct.newfile" file="${newfile}" todir="${dir.checksum.base}" fileext=".new.md5"/>
			<fail message="checksum verification for file ${newfile} failed! Cannot apply patch!">
				<condition><not><istrue value="${is.correct.newfile}"/></not></condition>
			</fail>
			<unset name="is.correct.newfile"/>
			<unset name="dir.checksum.base"/>
			
		</sequential>		
		
		<!-- im neuen build sicherstellen, dass die executables auch wirklich ausfuehrbar sind. -->
	<ant antfile="${dir.this.basedir}/${dirname}/${name.build.install.file}"
		target="chmod.executables" inheritall="false"/>
	</for>
	
	<antcall target="unstrip.client">
		<param name="dir.client" value="${dir.full}/${dir.client.installer}"/>
	</antcall>
	
	<!-- im neuen build sicherstellen, dass die executables auch wirklich ausfuehrbar sind. -->
	<ant antfile="${dir.full}/${name.build.install.file}"
		target="chmod.executables" inheritall="false"/>
</target>


<!--***************************************************-->
<!-- creates patch with diffs to previous version -->
<!--***************************************************-->	
<target name="create.patch" depends="get.buildnumber, get.prev.buildnumber" >
	<fail unless="buildnumber" message="buildnumber not set. cannot proceed!" />
	<fail unless="prevbuildnumber" message="prevbuildnumber not set. cannot proceed!" />
	
	<property name="dir.patch" value="../${name.patch.dir}"/>
	<available property="is.available.patch" file="${dir.patch}"/>
	<fail if="is.available.patch" message="patch already exists! Cannot proceed." />
	
	<mkdir dir="${dir.patch}"/>

	<dirname property="dir.this" file="${ant.file.update}" />
	<!-- replaces "\" with "\\" in order to use the dir as regexp later.-->
	<propertyregex property="regex.dir.this"	input="${dir.this}"
						regexp="\\"	replace="\\\\\\\\" global="true" defaultvalue="${dir.this}"/>
	
	<dirname property="dir.prev.parent" file="${dir.this.basedir}/${prevbuildnumber}/${name.full.dir}"/>
	<property name="dir.prev" value="${dir.prev.parent}/${name.full.dir}"/>
	<echo message="dir.prev: ${dir.prev}"/>
	<propertyregex property="regex.dir.prev"	input="${dir.prev}"
						regexp="\\"	replace="\\\\\\\\\\\\\\\\" global="true" defaultvalue="${dir.prev}"/>
	
	
	<antcall target="strip.client" >
		<param name="dir.client" value="${dir.client.installer}"/>
	</antcall>
	<antcall target="strip.client" >
		<param name="dir.client" value="${dir.prev}/${dir.client.installer}"/>
	</antcall>
	
	<!-- clone the directory structure -->
	<copy todir="${dir.patch}">
		<dirset dir="." />
		<fileset dir="." >
			<include name="*"/>
		</fileset>
	</copy>
	
	<echo file="${dir.patch}/${name.patchedbuild.file}" message="${prevbuildnumber}"/>
	
	<!-- patchfiles erzeugen -->
	<for param="file">
		<path>
			<fileset dir=".">
				<include name="*/**/*"/>
				<exclude name="**/${name.installer.jar}" />
				<exclude name="**/${name.installer.zip}" />
			</fileset>
		</path>
		<sequential>
			<var name="newfile" value="@{file}"/>
	
			<propertyregex property="oldfile"	input="${newfile}" override="true"
						regexp="${regex.dir.this}"	replace="${regex.dir.prev}" />
			
			<propertyregex property="patchfile.base"	input="${newfile}" override="true"
						regexp="${name.full.dir}"	replace="${name.patch.dir}" />
			<var name="patchfile" value="${patchfile.base}.${postfix.patch}" />
			
			<!-- generate checksums of old and new files: -->
			<dirname property="dir.checksum.base" file="${patchfile}"/>
			<checksum file="${oldfile}" todir="${dir.checksum.base}" fileext=".old.md5"/>
			<checksum file="${newfile}" todir="${dir.checksum.base}" fileext=".new.md5"/>
			<unset name="dir.checksum.base"/>
			
			<bsdiff oldfile="${oldfile}" newfile="${newfile}" patchfile="${patchfile}" />
		</sequential>	
	</for>
	
</target>

	
<!--***************************************************-->
<!-- analyzes the dir-structure in order to retrieve the previous buildnumber -->
<!--***************************************************-->	
<target name="get.prev.buildnumber" >
	<fail unless="buildnumber" message="buildnumber not set. Cannot proceed!"/>
	
	<pathconvert property="buildnumbers" pathsep=";" dirsep="/">
		<dirset dir="${dir.this.basedir}">
			<include name="*"/>
		</dirset>
	</pathconvert>
	
	<!-- sucht die vorletze Nummer -->
	<propertyregex property="prevbuildnumber"
						input="${buildnumbers}"
						regexp=".*/([0-9]*);[^0-9]*${buildnumber}[^0-9]*$"
						select="\1" />
	<echo message = "previous buildnumber: ${prevbuildnumber}"/>
	
	<fail unless="prevbuildnumber" message="could not find previous build. maybe directory - structure is incorrect." />
</target>
	
	
<!--***************************************************-->
<!-- publishes either via ftp or local filesystem or both. -->
<!--***************************************************-->
<target name="publish" depends="publish.full, publish.patch"/>

<target name="publish.patch">
	<antcall target="publish.ftp">
		<param name="dirname" value="${name.patch.dir}"/>
	</antcall>
	<antcall target="publish.local">
		<param name="dirname" value="${name.patch.dir}"/>
	</antcall>
</target>

<target name="publish.full">
	<antcall target="publish.ftp">
		<param name="dirname" value="${name.full.dir}"/>
	</antcall>	
	<antcall target="publish.local">
		<param name="dirname" value="${name.full.dir}"/>
	</antcall>
</target>


<!--***************************************************-->
<!-- fetches build given by buildnumber. -->
<!--***************************************************-->
<target name="fetch" depends="fetch.full, fetch.patch"/>

<target name="fetch.full">
	<fail unless="buildnumber" message="buildnumber not set. Do not know what build to fetch!"/>
	
	<var name="dirname" value="${buildnumber}/${name.full.dir}"/>
	
	<antcall target="fetch.ftp">
		<param name="dirname" value="${dirname}"/>
	</antcall>
	<antcall target="fetch.local">
		<param name="dirname" value="${dirname}"/>
	</antcall>
	
	<!-- im neuen build sicherstellen, dass die executables auch wirklich ausfuehrbar sind. -->
	<ant antfile="${dir.this.basedir}/${dirname}/${name.build.install.file}"
		target="chmod.executables" inheritall="false"/>
</target>

<target name="fetch.patch">
	<fail unless="buildnumber" message="buildnumber not set. Do not know what build to fetch!"/>
	
	<var name="dirname" value="${buildnumber}/${name.patch.dir}"/>
	
	<antcall target="fetch.ftp">
		<param name="dirname" value="${dirname}"/>
	</antcall>
	<antcall target="fetch.local">
		<param name="dirname" value="${dirname}"/>
	</antcall>
</target>


<!--***************************************************-->
<!-- publishes via ftp. -->
<!--***************************************************-->
<target name="publish.ftp" if="is.active.publish.ftp" 
				depends="get.buildnumber" >
	<fail unless="dirname" message="property dirname not set. cannot proceed!" />
	
	<property name="dir.src" value="../${dirname}"/>
	<property name="dir.dest" value="${publish.ftp.basedir}/${buildnumber}/${dirname}"/>
	
	
	<ftp action="mkdir"
       server="${publish.ftp.server}"    userid="${publish.ftp.user}"
       password="${publish.ftp.password}"  remotedir="${dir.dest}"
			 retriesallowed="${publish.ftp.retries}"/>
	
	<ftp server="${publish.ftp.server}" userid="${publish.ftp.user}" 
				password="${publish.ftp.password}" remotedir="${dir.dest}"
				verbose="true" passive="${publish.ftp.passive}"
				retriesallowed="${publish.ftp.retries}">
		<fileset dir="${dir.src}"/>
	</ftp>
</target>


<!--***************************************************-->
<!-- fetches via ftp. -->
<!--***************************************************-->
<target name="fetch.ftp" if="is.active.fetch.ftp" >
	<fail unless="dirname" message="property dirname not set. cannot proceed!" />
	
	<property name="dir.src" value="${fetch.ftp.basedir}/${dirname}"/>
	<property name="dir.dest" value="../../${dirname}"/>
	
	<fail message="${dir.dest} already exists! Cannot proceed.">
		<condition>	<available file="${dir.dest}"/>	</condition>
	</fail>
	<mkdir dir="${dir.dest}"/>
	
	<ftp action="recv"
				server="${fetch.ftp.server}" userid="${fetch.ftp.user}" 
				password="${fetch.ftp.password}" remotedir="${dir.src}"
				verbose="true" passive="${fetch.ftp.passive}"
				retriesallowed="${fetch.ftp.retries}">
		<fileset dir="${dir.dest}"/>
	</ftp>
</target>


<!--***************************************************-->
<!-- publishes via local filesystem. -->
<!--***************************************************-->
<target name="publish.local" if="is.active.publish.local"
				depends="get.buildnumber" >
	<fail unless="dirname" message="property dirname not set. cannot proceed!" />
	
	<property name="dir.src" value="../${dirname}"/>
	<property name="dir.dest" value="${publish.local.basedir}/${buildnumber}/${dirname}"/>
	
	<mkdir dir="${dir.dest}"/>
	<copy todir="${dir.dest}">
		<fileset dir="${dir.src}"/>
	</copy>
</target>


<!--***************************************************-->
<!-- publishes via local filesystem. -->
<!--***************************************************-->
<target name="fetch.local" if="is.active.fetch.local">
	<fail unless="dirname" message="property dirname not set. cannot proceed!" />
	
	<property name="dir.src" value="${fetch.local.basedir}/${dirname}"/>
	<property name="dir.dest" value="../../${dirname}"/>
	
	<fail message="${dir.dest} already exists! Cannot proceed.">
		<condition>	<available file="${dir.dest}"/>	</condition>
	</fail>
	
	<echo message="dir.src: ${dir.src}"/>
	<echo message="dir.dest: ${dir.dest}"/>
	<mkdir dir="${dir.dest}"/>
	<copy todir="${dir.dest}">
		<fileset dir="${dir.src}"/>
	</copy>
</target>

</project>
