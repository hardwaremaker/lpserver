<?xml version="1.0"?>
<!-- ======================================================================= -->
<!-- Antbuildfile zum Build eines HV-JBosses.                                -->
<!-- $Id: build.xml,v 1.33 2011/03/15 10:06:27 adi Exp $                                                                         -->
<!-- tested with jboss 4.0.4.GA -->
<!-- ======================================================================= -->
<project name="jboss" basedir=".">
	<property environment="env" />
	<property file="build.properties" />

	<property name="dir.jboss.server" value="${dir.jboss.home}/server" />
	<property name="dir.jboss.default" value="${dir.jboss.server}/default" />
	<property name="dir.jboss.helium" value="${dir.jboss.server}/helium" />
	<property name="dir.jboss.bin" value="${dir.jboss.home}/bin" />

	<property name="dir.helium.lib" value="${dir.jboss.helium}/lib" />
	<property name="dir.helium.conf" value="${dir.jboss.helium}/conf" />
	<property name="dir.helium.deploy" value="${dir.jboss.helium}/deploy" />
	<property name="dir.helium.ehcache" value="${dir.jboss.helium}/ehcache" />

	<property name="name.dir.general" value="all" />
	<property name="name.dir.mssql" value="mssql" />
	<property name="name.dir.postgresql" value="pgsql" />
	<property name="name.jboss.messaging.sar" value="jboss-messaging-scoped.sar" />
	<property name="file.jboss.messaging.sar" value="${name.dir.general}/server/helium/deploy/${name.jboss.messaging.sar}" />

	<import file="${file.build.commons}" />

	<condition property="is.os.windows">
		<os family="windows" />
	</condition>
	<condition property="is.os.unix">
		<os family="unix" />
	</condition>


	<target name="clean" depends="check.jboss.down">
		<!-- leider etwas unsauber: -->
		<trycatch>
			<try>
				<delete dir="${dir.jboss.helium}" />
			</try>
			<catch>
				<delete>
					<fileset dir="${dir.jboss.helium}">
						<!-- wenn aufruf von jbuilder dann koennen diese beiden dateien nicht geloescht werden: -->
						<exclude name="**/javax.servlet.jar" />
						<exclude name="**/javax.servlet.jsp.jar" />
					</fileset>
				</delete>
			</catch>
		</trycatch>
	</target>


	<target name="install" depends="check.db, check.jboss.down, clean">
		<unzip src="${file.helium.skel.zip}" dest="${dir.jboss.server}" />
		<antcall target="check.environment.server" />
		<antcall target="copy.default.libs" />
		<antcall target="copy.subtree.deploy" />
		<antcall target="setup.database.connection" />
		<antcall target="configure.jboss.endorsed" />
		<antcall target="configure.jboss.entw" />
		<antcall target="configure.jboss.windows" />
		<antcall target="configure.jboss.unix" />

		<antcall target="install.service" />
	</target>

	<target name="deploy">
		<fail unless="deploydir" message="deploydir not set, cannot proceed." />

		<var name="dir.deploy.jboss" value="${deploydir}/jboss" />
		<copy todir="${dir.deploy.jboss}">
			<fileset dir=".">
				<include name="**/*" />
				<exclude name="**/all/server/helium/lib/**" />
			</fileset>
		</copy>

		<var name="dir.deploy.jboss.lib" value="${deploydir}/jboss/all/server/helium/lib" />
		<copy todir="${dir.deploy.jboss.lib}">
			<flattenmapper />
			<fileset dir="./all/server/helium/lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<echo file="${dir.deploy.jboss}/project.properties.local">
is.prod = true
		</echo>
	</target>

	<!-- konfiguriert die db-connection fuer den JBoss -->
	<!-- description="copies datasource - xml files, and replaces parameters." -->
	<target name="setup.database.connection" depends="check.db, check.jboss.down">
		<!-- abhaengig von der db das richtige template verwenden: -->
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.ds.template" value="${name.ds.template.mssql}" />
			</then>
			<else>
				<property name="name.ds.template" value="${name.ds.template.postgres}" />
			</else>
		</if>

		<!-- file kopieren und tokens ersetzen: -->
		<property name="file.ds.file" value="${dir.helium.deploy}/${name.ds.file}" />
		<delete file="${file.ds.file}" />
		<copy file="${dir.templates}/${name.ds.template}" tofile="${file.ds.file}">
			<filterchain>
				<replacestring from="#{db.server.name}" to="${db.server.name}" />
				<replacestring from="#{db.database.name}" to="${db.database.name}" />
			</filterchain>
		</copy>

		<!-- db-spezifische files kopieren -->
		<antcall target="configure.jboss.db" />
	</target>


	<target name="switch.database.eclipse" depends="check.db" description="switches the fastlane-reader.xml in ejb/build (for eclipse)">
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.flr.template" value="${name.flr.template.mssql}" />
			</then>
			<else>
				<property name="name.flr.template" value="${name.flr.template.postgres}" />
			</else>
		</if>

		<!-- file kopieren und tokens ersetzen: -->
		<property name="file.flr.file" value="${dir.projecthome}/ejb/build/classes/${name.flr.file}" />
		<delete file="${file.flr.file}" />
		<copy file="../${dir.templates}/${name.flr.template}" tofile="${file.flr.file}" />
	</target>


	<!--
		collects all filenames which are in the mssql- and 
		psql- dirs and deletes these names in the jboss deploy dir.
	-->
	<target name="clean.jboss.db" depends="check.jboss.down">
		<dirname property="dir.this" file="${ant.file.jboss}" />
		<pathconvert property="mssqlfiles" pathsep="${line.separator}" dirsep="/">
			<fileset dir="${name.dir.mssql}" />
			<map from="${dir.this}/${name.dir.mssql}/" to="" />
		</pathconvert>
		<pathconvert property="postgresfiles" pathsep="${line.separator}" dirsep="/">
			<fileset dir="${name.dir.postgresql}" />
			<map from="${dir.this}/${name.dir.postgresql}/" to="" />
		</pathconvert>

		<property name="file.patternset.tmp" value="dbfiles.tmp" />
		<echo file="${file.patternset.tmp}" message="${mssqlfiles}${line.separator}${postgresfiles}" />
		<delete verbose="true">
			<fileset dir="${dir.jboss.home}">
				<patternset includesfile="${file.patternset.tmp}" />
			</fileset>
		</delete>
		<delete file="${file.patternset.tmp}" />
	</target>
	<target name="configure.jboss.db" depends="check.jboss.down, clean.jboss.db">
		<antcall target="configure.jboss.mssql" />
		<antcall target="configure.jboss.postgresql" />
		<antcall target="switch.db.jackrabbit" />
	</target>
	<target name="configure.jboss.endorsed">
		<antcall target="copy.subtree">
			<param name="srcdir" value="endorsed" />
		</antcall>
	</target>
	<target name="configure.jboss.windows" if="is.os.windows">
		<antcall target="copy.subtree">
			<param name="srcdir" value="windows" />
		</antcall>
		<antcall target="copy.template">
			<param name="file" value="${dir.templates}/${name.bat.run.template}" />
			<param name="tofile" value="${file.bat.jboss.run}" />
		</antcall>
		<antcall target="copy.template">
			<param name="file" value="${dir.templates}/${name.conf.wrapper.template}" />
			<param name="tofile" value="${file.conf.wrapper}" />
		</antcall>
	</target>
	<target name="configure.jboss.unix" if="is.os.unix">
		<chmod file="${file.sh.jboss.run}" perm="755" />
		<antcall target="copy.template">
			<param name="file" value="${dir.templates}/${name.sh.init.template}" />
			<param name="tofile" value="${file.sh.jboss.init}" />
		</antcall>
		<chmod file="${file.sh.jboss.init}" perm="755" />
		<chmod file="${file.sh.jboss.shutdown}" perm="755" />
	</target>

	<target name="copy.template">
		<fail unless="file" message="file not set, cannot proceed!" />
		<fail unless="tofile" message="tofile not set, cannot proceed!" />

		<copy file="${file}" tofile="${tofile}" overwrite="true">
			<filterchain>
				<replacestring from="#{jvm.permsize}" to="${jvm.permsize}" />
				<replacestring from="#{jvm.maxpermsize}" to="${jvm.maxpermsize}" />
				<replacestring from="#{jvm.initmemory}" to="${jvm.initmemory}" />
				<replacestring from="#{jvm.maxmemory}" to="${jvm.maxmemory}" />
				<replacestring from="#{jvm.args.server}" to="${jvm.args.server}" />
				<replacestring from="#{port.hv.server}" to="${port.hv.server}" />
			</filterchain>
		</copy>
	</target>

	<target name="install.service" if="is.service">
		<antcall target="install.service.windows" />
		<antcall target="install.service.unix" />
	</target>
	<target name="install.service.windows" if="is.os.windows">
		<echo>installing jboss as windows service...</echo>
		<exec dir="." executable="cmd.exe" spawn="true">
			<env key="NOPAUSE" value="YES" />
			<arg value="/C" />
			<arg value="start" />
			<arg value="cmd.exe" />
			<arg value="/C" />
			<arg value="${file.install.windows.service}" />
		</exec>
		<echo>...done</echo>
	</target>

	<target name="install.service.unix" if="is.os.unix">
		<echo>installing jboss as daemon...</echo>
		<exec executable="chkconfig">
			<arg line="jboss on" />
		</exec>
		<exec executable="service">
			<arg line="jboss start" />
		</exec>
		<echo>...done</echo>
	</target>


	<!-- ***************************************************-->
	<!-- waits until the jboss has started.-->
	<!-- ***************************************************-->
	<target name="waitfor.jboss.up">
		<echo message="warte maximal 500 s - jboss start und deploy ..." />
		<waitfor maxwait="700" maxwaitunit="second" checkevery="1" checkeveryunit="second" timeoutproperty="failed.start.jboss">
			<http url="${url.jboss.running}" />
		</waitfor>
		<fail if="failed.start.jboss" message="waitfor.jboss.up timed out!?" />
	</target>

	<!-- ***************************************************-->
	<!-- waits until the jboss has stopped-->
	<!-- ***************************************************-->
	<target name="waitfor.jboss.down">
		<echo message="warte maximal 300 s - jboss stop" />
		<waitfor maxwait="300" maxwaitunit="second" checkevery="1" checkeveryunit="second" timeoutproperty="failed.stop.jboss">
			<not>
				<socket server="${name.hv.server}" port="${port.hv.server}" />
			</not>
		</waitfor>
		<fail if="failed.stop.jboss" message="waitfor.jboss.down timed out!?" />
	</target>

	<!-- ***************************************************-->
	<!-- starts heliumv jboss server -->
	<!-- ***************************************************-->
	<target name="start">
		<echo>start jboss</echo>

		<if>
			<istrue value="${is.service}" />
			<then>
				<exec executable="net" osfamily="windows">
					<arg line="start 'HeliumV Application Server'" />
				</exec>
				<exec executable="service" osfamily="unix">
					<arg line="jboss start" />
				</exec>
			</then>
			<else>
				<exec dir="${dir.jboss.bin}" executable="cmd.exe" osfamily="windows" spawn="true">
					<env key="JAVA_OPTS" value="${jvm.args.server}" />
					<env key="NOPAUSE" value="YES" />
					<arg value="/C" />
					<arg value="start" />
					<arg value="cmd.exe" />
					<arg value="/C" />
					<arg value="run.bat -c helium -b 0.0.0.0" />
				</exec>

				<exec dir="${dir.jboss.bin}" executable="${dir.jboss.bin}/run.sh" osfamily="unix" spawn="true">
					<env key="JAVA_OPTS" value="${jvm.args.server}" />
					<arg value="-c helium" />
				</exec>
			</else>
		</if>
		<antcall target="waitfor.jboss.up" />
	</target>


	<!-- ***************************************************-->
	<!-- stops heliumv jboss server -->
	<!-- ***************************************************-->
	<target name="stop">
		<if>
			<istrue value="${is.service}" />
			<then>
				<exec executable="net" osfamily="windows">
					<arg line="stop 'HeliumV Application Server'" />
				</exec>
				<exec executable="service" osfamily="unix">
					<arg line="jboss stop" />
				</exec>
			</then>
			<else>
				<exec dir="${dir.jboss.bin}" executable="cmd.exe" osfamily="windows">
					<arg value="start" />
					<arg value="cmd.exe" />
					<arg value="/C" />
					<arg value="shutdown.bat -s jnp://${name.hv.server}:${port.hv.server}" />
				</exec>

				<exec dir="${dir.jboss.bin}" executable="${dir.jboss.bin}/shutdown.sh" osfamily="unix">
					<arg value="-s jnp://${name.hv.server}:${port.hv.server}" />
				</exec>
			</else>
		</if>

		<antcall target="waitfor.jboss.down" />
	</target>
	<!--	
	<target name="prepare.messaging" >
		<unzip src="${file.jboss.messaging.sar}" dest="${dir.helium.deploy}/jboss-messaging.sar"/>
    <delete verbose="on" file="${dir.helium.deploy}/jboss-messaging.sar/destinations-service.xml"/>
    <delete verbose="on" file="${dir.helium.deploy}/jboss-messaging.sar/hsqldb-persistence-service.xml"/>
	</target>
-->

	<target name="copy.subtree">
		<fail unless="srcdir" message="Property srcdir not set, cannot proceed." />
		<copy verbose="true" todir="${dir.jboss.home}" overwrite="true">
			<fileset dir="${srcdir}">
				<exclude name="**/${name.jboss.messaging.sar}" />
			</fileset>
		</copy>
	</target>

	<target name="copy.subtree.deploy" description="alles aus jboss/../deploy kopieren">
		<copy verbose="true" todir="${dir.helium.deploy}" overwrite="true">
			<fileset dir="${name.dir.general}/server/helium/deploy">
				<exclude name="**/CVS" />
				<exclude name="**/*lpserver-ucs.ear"/>
			</fileset>
		</copy>
	</target>

	<!-- **************************************************-->
	<!-- copy the following libs from jboss/server/default to heliumv-server.-->
	<!-- so we do not need to include them in our deploy. -->
	<!-- **************************************************-->
	<target name="copy.default.libs">
		<!-- die sind schon drinnen -->
		<!--<copy todir="${dir.helium.lib}">
			<fileset dir="${dir.jboss.default}/lib">
				<patternset includesfile="lib.patternset"/>
			</fileset>
		</copy>-->
		<copy todir="${dir.helium.lib}">
			<flattenmapper />
			<fileset dir="${name.dir.general}/server/helium/lib">
				<include name="**/barbecue-1.5-beta1.jar" />
				<include name="**/barcode4j-2.1.jar" />
				<include name="**/batik-*.jar" />
				<include name="**/jasperreports-*.jar" />
				<include name="**/xml-apis.jar" />
				<include name="**/xml-apis-ext.jar" />
				<include name="**/jfreechart-*.jar" />
				<include name="**/iText-2.1.7.js2.jar" />
				<include name="**/jcommon-1.0.16.jar" />
				<include name="**/swtgraphics2d.jar" />
				<include name="**/jxl.jar" />
				<include name="tidy.jar" />
				<!--	<include name="**/iReport.jar" /> -->
				<include name="jcr-1.0.jar" />
			</fileset>
		</copy>
	</target>

	<!-- ***************************************************-->
	<!-- checks if the environment for the server is set up correctly. -->
	<!-- ***************************************************-->
	<target name="check.environment.server">
		<fail unless="env.JBOSS_HOME" message="JBOSS_HOME ist nicht gesetzt!" />

		<available file="${dir.helium.lib}" type="dir" property="bLibDa" />
		<fail unless="bLibDa" message="${dir.helium.lib} nicht gefunden!" />

		<available file="${dir.jboss.helium}" type="dir" property="bDeployDa" />
		<fail unless="bDeployDa" message="${dir.jboss.helium} nicht gefunden!" />

		<available file="${dir.helium.conf}" type="dir" property="bConfDa" />
		<fail unless="bConfDa" message="${dir.helium.conf} nicht gefunden!" />

		<echo message="JBOSS_HOME gefunden = ${env.JBOSS_HOME}" />
		<echo message="JBOSS_HOME server helium lib gefunden = ${dir.helium.lib}" />
		<echo message="JBOSS_HOME server helium conf gefunden = ${dir.helium.conf}" />

		<echo>server environment ok.</echo>
	</target>


	<target name="configure.jboss.mssql" if="db.which.MSSQL">
		<antcall target="copy.subtree">
			<param name="srcdir" value="mssql" />
		</antcall>
	</target>
	<target name="configure.jboss.postgresql" if="db.which.POSTGRESQL">
		<antcall target="copy.subtree">
			<param name="srcdir" value="pgsql" />
		</antcall>
	</target>
	<target name="configure.jboss.entw" unless="is.prod">
		<antcall target="copy.subtree">
			<param name="srcdir" value="entw" />
		</antcall>
	</target>

	<!--
		changes the database dialect in the jackrabbit-x.rar file + changes the servername
	-->
	<target name="switch.db.jackrabbit" depends="check.db">
		<property name="dir.rar.unpack" value="${name.rar.unpack}" />
		<property name="file.jackrabbit.rar" value="${dir.jboss.deploy}/${name.server.rar}" />

		<mkdir dir="${dir.rar.unpack}" />
		<echo message="unzipping '${file.jackrabbit.rar}' to dir '${dir.rar.unpack}'" />
		<unzip src="${file.jackrabbit.rar}" dest="${dir.rar.unpack}" />

		<!-- richtiges repository.xml kopieren -->
		<echo>Aendern des repository.xml fuer DB</echo>
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.rar.template" value="${name.repository.xml.mssql}" />
			</then>
			<else>
				<property name="name.rar.template" value="${name.repository.xml.postgres}" />
			</else>
		</if>

		<copy overwrite="true" verbose="true" file="${dir.templates}/${name.rar.template}" tofile="${dir.rar.unpack}/${name.repository.template}" />
		<delete file="${dir.rar.unpack}/${name.repository.xml}" />

		<echo>${db.server.name}</echo>
		<copy file="${dir.rar.unpack}/${name.repository.template}" tofile="${dir.rar.unpack}/${name.repository.xml}">
			<filterchain>
				<replacestring from="#{db.server.name}" to="${db.server.name}" />
			</filterchain>
		</copy>
		<delete file="${dir.rar.unpack}/${name.repository.template}" />

		<zip destfile="${file.jackrabbit.rar}" update="true" duplicate="fail" basedir="${dir.rar.unpack}" />
		<delete dir="${dir.rar.unpack}" />
	</target>

	<target name="switch.db.mediarabbit" depends="check.db">
		<property name="dir.rar.unpack" value="${name.rar.unpack}" />
		<property name="file.mediarabbit.rar" value="${dir.jboss.deploy}/${name.media.server.rar}" />

		<mkdir dir="${dir.rar.unpack}" />
		<echo message="unzipping '${file.mediarabbit.rar}' to dir '${dir.rar.unpack}'" />
		<unzip src="${file.mediarabbit.rar}" dest="${dir.rar.unpack}" />

		<!-- richtiges repository.xml kopieren -->
		<echo>Aendern des repository.xml fuer HV_KOMMUNIKATION DB</echo>
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.rar.template" value="${name.media.repository.xml.mssql}" />
			</then>
			<else>
				<property name="name.rar.template" value="${name.media.repository.xml.postgres}" />
			</else>
		</if>

		<copy overwrite="true" verbose="true" file="${dir.templates}/${name.rar.template}" tofile="${dir.rar.unpack}/${name.media.repository.template}" />
		<delete file="${dir.rar.unpack}/${name.media.repository.xml}" />

		<echo>${db.server.name}</echo>
		<copy file="${dir.rar.unpack}/${name.media.repository.template}" tofile="${dir.rar.unpack}/${name.media.repository.xml}">
			<filterchain>
				<replacestring from="#{db.server.name}" to="${db.server.name}" />
			</filterchain>
		</copy>
		<delete file="${dir.rar.unpack}/${name.media.repository.template}" />

		<zip destfile="${file.mediarabbit.rar}" update="true" duplicate="fail" basedir="${dir.rar.unpack}" />
		<delete dir="${dir.rar.unpack}" />
	</target>

	<target name="setup.without.p6spy" depends="check.db, check.jboss.down">
		<antcall target="setup.database.connection" />
		<antcall target="switch.db.jackrabbit" />
		<antcall target="switch.db.mediarabbit" />
		<delete file="${dir.conf}/${name.spy.properties}" />
		<delete file="${dir.helium.lib}/p6spy.jar" />
	</target>

	<target name="delete.lpcrypt" depends="check.db, check.jboss.down">
		<delete file="${dir.helium.lib}/lpcrypt.jar" />
	</target>


	<target name="setup.with.p6spy" depends="check.db, check.jboss.down">
		<antcall target="setup.p6spy.database" />
		<antcall target="switch.db.jackrabbit.p6spy" />
		<antcall target="switch.db.mediarabbit.p6spy" />
	</target>


	<!-- P6Spy konfigurieren -->
	<target name="setup.p6spy.database" depends="check.db, check.jboss.down">
		<!-- abhaengig von der db das richtige template verwenden: -->
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.ds.template" value="${name.ds.template.p6spy.mssql}" />
			</then>
			<else>
				<property name="name.ds.template" value="${name.ds.template.p6spy.postgres}" />
			</else>
		</if>

		<!-- file kopieren und tokens ersetzen: -->
		<property name="file.ds.file" value="${dir.helium.deploy}/${name.ds.file}" />
		<delete file="${file.ds.file}" />
		<copy file="${dir.templates}/${name.ds.template}" tofile="${file.ds.file}">
			<filterchain>
				<replacestring from="#{db.server.name}" to="${db.server.name}" />
				<replacestring from="#{db.database.name}" to="${db.database.name}" />
			</filterchain>
		</copy>

		<!-- abhaengig von der db das richtige template fuer p6spy verwenden: -->
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.spy.properties.template" value="${name.spy.properties.mssql}" />
			</then>
			<else>
				<property name="name.spy.properties.template" value="${name.spy.properties.postgresql}" />
			</else>
		</if>
		<copy overwrite="true" verbose="true" file="${dir.templates}/${name.spy.properties.template}" tofile="${dir.conf}/${name.spy.properties}" />


		<!-- db-spezifische files kopieren -->
		<antcall target="configure.jboss.db" />
	</target>

	<!--
		changes the database dialect in the jackrabbit-x.rar file + changes the servername
	-->
	<target name="switch.db.jackrabbit.p6spy" depends="check.db">
		<property name="dir.rar.unpack" value="${name.rar.unpack}" />
		<property name="file.jackrabbit.rar" value="${dir.jboss.deploy}/${name.server.rar}" />

		<mkdir dir="${dir.rar.unpack}" />
		<echo message="unzipping '${file.jackrabbit.rar}' to dir '${dir.rar.unpack}'" />
		<unzip src="${file.jackrabbit.rar}" dest="${dir.rar.unpack}" />

		<!-- richtiges repository.xml kopieren -->
		<echo>Aendern des repository.xml fuer DB</echo>
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.rar.template" value="${name.repository.xml.p6spy.mssql}" />
			</then>
			<else>
				<property name="name.rar.template" value="${name.repository.xml.p6spy.postgres}" />
			</else>
		</if>

		<copy overwrite="true" verbose="true" file="${dir.templates}/${name.rar.template}" tofile="${dir.rar.unpack}/${name.repository.template}" />
		<delete file="${dir.rar.unpack}/${name.repository.xml}" />

		<echo>Dokumente DB p6spy for server ${db.server.name}</echo>
		<copy file="${dir.rar.unpack}/${name.repository.template}" tofile="${dir.rar.unpack}/${name.repository.xml}">
			<filterchain>
				<replacestring from="#{db.server.name}" to="${db.server.name}" />
			</filterchain>
		</copy>
		<delete file="${dir.rar.unpack}/${name.repository.template}" />

		<zip destfile="${file.jackrabbit.rar}" update="true" duplicate="fail" basedir="${dir.rar.unpack}" />
		<delete dir="${dir.rar.unpack}" />
	</target>

	<!--
		changes the database dialect in the jackrabbit-x.rar file + changes the servername
	-->
	<target name="switch.db.mediarabbit.p6spy" depends="check.db">
		<property name="dir.rar.unpack" value="${name.rar.unpack}" />
		<property name="file.mediarabbit.rar" value="${dir.jboss.deploy}/${name.media.server.rar}" />

		<mkdir dir="${dir.rar.unpack}" />
		<echo message="unzipping '${file.mediarabbit.rar}' to dir '${dir.rar.unpack}'" />
		<unzip src="${file.mediarabbit.rar}" dest="${dir.rar.unpack}" />

		<!-- richtiges repository.xml kopieren -->
		<echo>Aendern des repository.xml fuer HV_KOMMUNIKATION DB (p6spy)</echo>
		<if>
			<isset property="db.which.MSSQL" />
			<then>
				<property name="name.rar.template" value="${name.media.repository.xml.p6spy.mssql}" />
			</then>
			<else>
				<property name="name.rar.template" value="${name.media.repository.xml.p6spy.postgres}" />
			</else>
		</if>

		<copy overwrite="true" verbose="true" file="${dir.templates}/${name.rar.template}" tofile="${dir.rar.unpack}/${name.media.repository.template}" />
		<delete file="${dir.rar.unpack}/${name.media.repository.xml}" />

		<echo>Media DB p6spy for server ${db.server.name}</echo>
		<copy file="${dir.rar.unpack}/${name.media.repository.template}" tofile="${dir.rar.unpack}/${name.media.repository.xml}">
			<filterchain>
				<replacestring from="#{db.server.name}" to="${db.server.name}" />
			</filterchain>
		</copy>
		<delete file="${dir.rar.unpack}/${name.repository.template}" />

		<zip destfile="${file.mediarabbit.rar}" update="true" duplicate="fail" basedir="${dir.rar.unpack}" />
		<delete dir="${dir.rar.unpack}" />
	</target>

</project>
