<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Antbuildfile enthaelt alle tools fuer alle Antbuildfiles.               -->
<!--                                                                         -->
<!-- $Id: build-commons.xml,v 1.8 2011/12/13 17:03:39 adi Exp $ -->
<!--                                                                         -->
<!-- Wer | Wann     | Was                                                    -->
<!--                                                                         -->
<!-- ======================================================================= -->

<project name="build-commons" basedir="." default="readme">

	<property environment="env"/>
	<dirname property="build-commons.basedir" file="${ant.file.build-commons}"/>
	<property file="${build-commons.basedir}/build-commons.properties.local"/>
	<property file="${build-commons.basedir}/build-commons.properties"/>



<!-- ***************************************************-->
<!-- some sets for future reference -->
<!-- ***************************************************-->
<propertyset id="id.db.properties">
  <propertyref prefix="db"/>
</propertyset>

	
<!-- ***************************************************-->
<!-- Zusaetzliche Task Definitionen -->
<!-- ***************************************************-->
<!-- ant-contrib: if, for, ... -->
<taskdef resource="net/sf/antcontrib/antlib.xml">
  <classpath>
    <pathelement location="${env.ANT_HOME}/lib/ant-contrib-1.0b3.jar"/>
  </classpath>
</taskdef>

<!-- target to build and declare our custom ant-tasks -->
<target name="declare.anttools">
	<!-- build anttools -->
	<ant antfile="${file.build.anttools}" target="build"
			 inheritall="false"/>
	<!--declare the tasks -->
	<taskdef name="filechooser"
        classname="com.lp.anttools.tasks.FileChooser"
        classpath="${dir.anttools.classes}"/>
	<taskdef name="tolower"
        classname="com.lp.anttools.tasks.ToLower"
        classpath="${dir.anttools.classes}"/>
	<taskdef name="updatenumbersplit"
				classname="com.lp.anttools.tasks.UpdateNumberSplit"
				classpath="${dir.anttools.classes}"/>
  <taskdef name="increment"
        classname="com.lp.anttools.tasks.Increment"
        classpath="${dir.anttools.classes}"/>
	<typedef name="prefixfilter"
        classname="com.lp.anttools.types.PrefixFilter"
        classpath="${dir.anttools.classes}"/>
</target>

<target name="readme" description="read me - how 2 use">
  <echo>
    <![CDATA[
    this file contains commonly used targets and task-definitions,
		used by other build files.
    ]]>
  </echo>
</target>


<macrodef name="fullospath" backtrace="false">
	<attribute name="property" default=""/>
	<attribute name="path" default=""/>
	<sequential>
		<!-- pathconvert is necessary in order to get full path name (evtl. elegantere moeglichkeit?)-->
		<if>
			<os family="windows"/>
			<then>
				<pathconvert property="@{property}" targetos="windows">
					<path location="@{path}"/>
				</pathconvert>
			</then>
			<else>
				<pathconvert property="@{property}" targetos="unix">
					<path location="@{path}"/>
				</pathconvert>
			</else>
		</if>
	</sequential>
</macrodef>



<!-- ***************************************************-->
<!-- check the state of the heliumv jboss-server -->
<!-- ***************************************************-->
<target name="check.jboss.up">
	<fail message="heliumv jboss is not running. - cannot proceed!">
		<condition>
			<not>
				<http url="${url.jboss.running}"/>
			</not>
		</condition>
	</fail>
</target>
<target name="check.jboss.down">
	<fail message="heliumv jboss is running. - cannot proceed!">
		<condition>
			<socket server="${name.hv.server}" port="${port.hv.server}"/>
		</condition>
	</fail>
</target>


<!-- ***************************************************-->
<!-- helper-target to determine the port of current db. -->
<!-- ***************************************************-->
<target name="get.db.port">
	<if>
		<isset property="db.which.MSSQL"/>
		<then>
			<property name="db.port" value="${port.db.mssql}"/>
		</then>
		<else>
			<property name="db.port" value="${port.db.postgres}"/>
		</else>
	</if>
</target>


<!-- ***************************************************-->
<!-- check the state of the database-servers -->
<!-- ***************************************************-->
<target name="check.db.up" depends="get.db.port">
	<fail message="${db} - Database server is not running on ${db.server.name}. - cannot proceed!">
		<condition>
			<not>
				<socket server="${db.server.name}" port="${db.port}"/>
			</not>
		</condition>
	</fail>
</target>


<!-- ***************************************************-->
<!-- checks the database-values and requests input if not set -->
<!-- ***************************************************-->
<target name="check.db"
				depends="check.db.type, check.db.server, check.db.database"
				description="checks the database-values and requests input if not set."/>


<!-- ***************************************************-->
<!-- checks if the database name is set. if not, then requests user input. -->
<!-- ***************************************************-->
<target name="check.db.database" depends="input.db.database">
	<echo>db.database.name=${db.database.name}</echo>
	<fail unless="db.database.name"
				message="property db.database.name is not set!" />
</target>
<target name="input.db.database" unless="db.database.name">
	<input
		message="Welche Datenbank soll verwendet werden? ${line.separator}
		(default: ${db.database.default})${line.separator}"
		defaultvalue="${db.database.default}"
		addproperty="db.database.name"
	/>
</target>


<!-- ***************************************************-->
<!-- checks if the db-server is set. if not, then requests user input. -->
<!-- ***************************************************-->
<target name="check.db.server" depends="input.db.server">
	<echo>db.server.name=${db.server.name}</echo>
	<fail unless="db.server.name"
				message="property db.server.name is not set!" />
</target>
<target name="input.db.server" unless="db.server.name" >
	<input
		message="Welcher Datenbank-Server soll verwendet werden? ${line.separator}
		(default: ${db.server.default})${line.separator}"
		defaultvalue="${db.server.default}"
		addproperty="db.server.name"
	/>
</target>


<!-- ***************************************************-->
<!-- checks if the db-type is set. if not, then requests user input. -->
<!-- ***************************************************-->
<target name="check.db.type" unless="db.which" depends="input.db.type">
	<echo>db=${db}</echo>
  <fail unless="db"
    message="db=(MSSQL | POSTGRESQL) fehlt (zB. ant -f XY.xml ENTW -Ddb=MSSQL)!"/>
	<condition property="db.which.MSSQL">
    <equals arg1="MSSQL" arg2="${db}"/>
  </condition>
  <condition property="db.which.POSTGRESQL">
    <equals arg1="POSTGRESQL" arg2="${db}"/>
  </condition>
  <condition property="db.wich">
     <or>
      <isset property="db.which.POSTGRESQL"/>
      <isset property="db.which.MSSQL"/>
    </or>
  </condition>
  <fail unless="db.wich">
    unable to set db.which; db=(MSSQL | POSTGRESQL) fehlerhaft;
	</fail>
</target>
<!--- the input-target for check.db.type -->
<target name="input.db.type" unless="db" description="DB-Auswahl ueber Input-Abfrage">
	<condition property="defaultkey" value="p" else="m">
		<equals arg1="POSTGRESQL" arg2="${db.default}"/>
	</condition>
  <input
    message="Welcher SQL-Server Typ soll verwendet werden? ${line.separator}
              m: MSSQL${line.separator}
              p: POSTGRESQL${line.separator}
		(default: ${db.default})${line.separator}"
    validargs="m,p"
    defaultvalue="${defaultkey}"
    addproperty="db.key"
  />
  <condition property="db" value="MSSQL">
    <equals arg1="m" arg2="${db.key}"/>
  </condition>
  <condition property="db" value="POSTGRESQL">
    <equals arg1="p" arg2="${db.key}"/>
  </condition>
</target>
	
<!-- ***************************************************-->
<!-- checks if the db-server is set. if not, then requests user input. -->
<!-- ***************************************************-->
<target name="check.p6spy" depends="input.p6spy">
	<echo>p6spy=${with.p6spy}</echo>
	<fail unless="with.p6spy"
				message="property with.p6spy is not set!" />
</target>
<target name="input.p6spy" unless="with.p6spy" >
	<condition property="defaultkey" value="ohne" else="mit">
		<equals arg1="${p6spy.default}" arg2="mit"/>
	</condition>
  <input
    message="Sollte p6spy verwendet werden? ${line.separator}
              ohne {line.separator}
              mit {line.separator}
		(default: ${p6spy.default}${line.separator}"
    validargs="ohne,mit"
	defaultvalue="${p6spy.default}"
  	addproperty="p6spy.key"
  />
  <condition property="p6spy" value="ohne">
    <equals arg1="ohne" arg2="${p6spy.key}"/>
  </condition>
  <condition property="p6spy" value="mit">
    <equals arg1="mit" arg2="${p6spy.key}"/>
  </condition>
</target>


<!--***************************************************-->
<!-- retrieves the buildnumber out of cvstag.txt. -->
<!--***************************************************-->
<target name="get.buildnumber" >
	<loadfile property="buildnumber"
						srcfile="${name.cvstag.file}">
		<filterchain>
			<tokenfilter>
				<containsregex pattern=".*_([0-9]*)$$"
												replace="\1"/>
			</tokenfilter>
			<striplinebreaks/>
		</filterchain>
	</loadfile>
	<echo message="read buildnumber from file ${name.cvstag.file}: ${buildnumber}"/>
</target>

<!--
############### jars ##########
  activation.jar
  mail-1.4.jar
  AntelopeTasks_3.4.2.jar
###############################
-->
<!-- wrapper-macro in order to stop the jboss before exiting. -->
<macrodef name="developeremail" backtrace="true">
	<attribute name="message" default=""/>
	<attribute name="subject" default=""/>
	<text name="bodytext" optional="true"/>
	<sequential>
		<var name="mailhost" value="mail.logistikpur.local"/>

    <mail mailhost="${mailhost}" subject="@{subject}"  charset="utf-8" encoding="mime" messagemimetype="text/plain" failonerror="false">
        <from address="cruisecontrol@logistikpur.com"/>
        <to address="adi@heliumv.com"/>
        <to address="christian.kollmann@heliumv.com"/>
        <to address="robert.kreiseder@heliumv.com"/>
        <to address="gerold.pummer@heliumv.com"/>
        <to address="werner@heliumv.com"/>
	    <message>@{message}@{bodytext}

This message was sent by User '${env.USERNAME}' on host '${env.USERDOMAIN}'.
				</message>
    </mail>
	</sequential>
</macrodef>


<!-- ***************************************************-->
<!-- checks if the environment for the client is set up correctly. -->
<!-- ***************************************************-->
<target name="check.environment.client">
<!--  <available file="${dir.src}" type="dir" property="bSrc"/>
  <fail unless="bSrc" message="${dir.src} nicht gefunden!"/> -->

	<!--
  <available file="${dir.lib}" type="dir" property="bLib"/>
  <fail unless="bLib" message="${dir.lib} nicht gefunden!"/> -->

  <!--<echo>client environment ok.</echo> -->
</target>


</project>

